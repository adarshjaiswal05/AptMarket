var web3 = new Web3(window.ethereum);

	let contract721;
	const ADDRESS721 = "0x6FAE4807c844d805a9c2007E99bfe6Ce0d6eFbB2"
	const ABI721 = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "approved",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "admin",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getApproved",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "market",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "tokenURI",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerOf",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "setMarketAddress",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "tokenURI",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]
	contract721 = new web3.eth.Contract(ABI721, ADDRESS721);



	let contract1155;
	const ADDRESS1155 = "0x417958Df10C9C91f5707DA9A261531a3122E3Db4"
	const ABI1155 =[
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "tokenURI",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			},
			{
				"internalType": "uint256[]",
				"name": "amounts",
				"type": "uint256[]"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeBatchTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "setMarketAddress",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			},
			{
				"indexed": false,
				"internalType": "uint256[]",
				"name": "values",
				"type": "uint256[]"
			}
		],
		"name": "TransferBatch",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "TransferSingle",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "value",
				"type": "string"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "URI",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "admin",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address[]",
				"name": "accounts",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			}
		],
		"name": "balanceOfBatch",
		"outputs": [
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "market",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "uri",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
	contract1155 = new web3.eth.Contract(ABI1155, ADDRESS1155);
 

	let contractMarket;
	const ADDRESSMarket = "0x1b7E8fC97186033BbEC36A85b50F00eE5524643E"
	const ABIMarket =[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			}
		],
		"name": "bidAsset",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "contract APT721",
				"name": "erc721",
				"type": "address"
			},
			{
				"internalType": "contract APT1155",
				"name": "erc1155",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "buyer",
				"type": "address"
			}
		],
		"name": "BoughtNFT",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			}
		],
		"name": "buyImage",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "quantity",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "royaltiesPercentage",
				"type": "uint256"
			}
		],
		"name": "mintUser",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "bidder",
				"type": "address"
			}
		],
		"name": "rejectBid",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			}
		],
		"name": "removeFromBidding",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			}
		],
		"name": "removeFromSale",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "setOnBidding",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "setOnSale",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "withdrawAccumlatedAmount",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			}
		],
		"name": "withdrawbid",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "_addressAccumlatedAmount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "tokenUri",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "getAsset",
		"outputs": [
			{
				"components": [
					{
						"internalType": "uint256",
						"name": "tokenType",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "url",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "biddingPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "salePrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "royaltySaleShare",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "quantityOnSale",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "quantityOnBidding",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "remainingQuantity",
						"type": "uint256"
					}
				],
				"internalType": "struct CommonMarket.AssetDetails",
				"name": "asset",
				"type": "tuple"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "royaltyDeatils",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "Type",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "creator",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "royaltyPercentage",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "tokenId1155",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "tokenId721",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
	contractMarket = new web3.eth.Contract(ABIMarket, ADDRESSMarket);
 

let sLogin = "no"

async function loginWithMetaMask() {

	let nId = await web3.eth.net.getId()
	if (nId != 5) {
		userWallet.innerText = "Invalid network please select gorel testnet to continue"
		return console.log("invalid network please select gorel testnet to continue")
	}

	else {

		const sAccounts = await window.ethereum.request({ method: 'eth_requestAccounts' })
			.catch((e) => {
				console.error(e.message)
				return
			})
		console.log(sAccounts[0])
		if (!sAccounts) { return }
		else {


			loginButton.innerText = 'Sign out of MetaMask'
			userWallet.innerText = sAccounts[0]
			loginButton.onclick = "signOutOfMetaMask()"

			loginButton.removeEventListener('click', loginWithMetaMask)
			setTimeout(() => {
				loginButton.addEventListener('click', signOutOfMetaMask)
			}, 200)
		}
		sLogin = "yes"
	}
}

function signOutOfMetaMask() {
	console.log("sign out called")

	userWallet.innerText = ''
	loginButton.innerText = 'Sign in with MetaMask'

	loginButton.removeEventListener('click', signOutOfMetaMask)
	setTimeout(() => {
		loginButton.addEventListener('click', loginWithMetaMask)
	}, 200)

	sLogin = "no"
}



async function asset721Details() {
	try {
		var sAddress = document.getElementById("details721ofaddress").value;
		contractMarket.methods._assetId721(sAddress).call(function (err, oBalance) {
			getdetails721.innerText = oBalance
			console.log(oBalance)
		console.log("biddingPrice="+oBalance.biddingPrice)
		console.log("quantityOnBidding="+oBalance.quantityOnBidding)
		console.log("quantityOnSale="+oBalance.quantityOnSale)
		console.log("remainingQuantity="+oBalance.remainingQuantity)
		console.log("salePrice="+oBalance.salePrice)
		console.log("tokenType="+oBalance.tokenType)
		console.log("url="+oBalance.url)
		})
	} catch (err) {
		console.log(err)
			}
}

async function assetDetails() {
	try {
		var sTokenUri = document.getElementById("uri").value;
		var sAddress = document.getElementById("owner").value

		contractMarket.methods.getAsset(sTokenUri,sAddress).call(function (err, oBalance) {
			// getdetails721.innerText = oBalance
			console.log(oBalance)
		console.log("biddingPrice="+oBalance.biddingPrice)
		console.log("quantityOnBidding="+oBalance.quantityOnBidding)
		console.log("quantityOnSale="+oBalance.quantityOnSale)
		console.log("remainingQuantity="+oBalance.remainingQuantity)
		console.log("salePrice="+oBalance.salePrice)
		console.log("tokenType="+oBalance.tokenType)
		console.log("url="+oBalance.url)
		})
	} catch (err) {
		console.log(err)
			}
}

async function royaltyDetails() {
	try {
		

		contractMarket.methods.royaltyDeatils(sTokenUri).call(function (err, oBalance) {
		
			console.log(oBalance)
		console.log("tokenId="+oBalance.tokenId)
		console.log("Type="+oBalance.Type)
		console.log("creator="+oBalance.creator)
		console.log("royaltyPercentage="+oBalance.royaltyPercentage)
		})
	} catch (err) {
		console.log(err)
			}
}



async function asset1155Details() {

	try {
		var sAddress = document.getElementById("details1155ofaddress").value;
		contractMarket.methods._assetId1155(sAddress).call(function (err, oBalance) {
			getdetails1155.innerText = oBalance
			console.log("biddingPrice="+oBalance.biddingPrice)
			console.log("quantityOnBidding="+oBalance.quantityOnBidding)
			console.log("quantityOnSale="+oBalance.quantityOnSale)
			console.log("remainingQuantity="+oBalance.remainingQuantity)
			console.log("salePrice="+oBalance.salePrice)
			console.log("tokenType="+oBalance.tokenType)
			console.log("url="+oBalance.url)
		})
	} catch (err) {
		console.log(err)
	}


}


async function mintToken() {
	if (sLogin == "no") {
		mintTkn.innerText = "please login to continue";
		return console.log("please login to continue")
	}

	try {
		let sTokenUri = document.getElementById("tokenuri").value;
		let nQuantity = document.getElementById("quantity").value;
		let nRoyalty = document.getElementById("royalty").value;


		// if (!checkInput(sAddress, mintTkn)) { return }
		// if (!checkInput(nMetaData, mintTkn)) { return }
		// if (!checkAmount(nMetaData, mintTkn)) { return }
		// if (!checkAddress(sAddress, mintTkn)) { return }

		mintTkn.innerText = ""
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.mintUser(sTokenUri, nQuantity,nRoyalty)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		contractMarket.methods.mintUser(sTokenUri, nQuantity,nRoyalty).send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
}


async function setOnSale() {
	if (sLogin == "no") {
		mintTkn.innerText = "please login to continue";
		return console.log("please login to continue")
	}

	try {
		let sTokenUri = document.getElementById("TokenUri").value;
		let nPrice = document.getElementById("Price").value;
		let nQuantity = document.getElementById("Quantity").value;

		// setOnsale.innerText = "";

		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.setOnSale(sTokenUri, nPrice, nQuantity)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		contractMarket.methods.setOnSale(sTokenUri, nPrice, nQuantity).send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)
	} catch (err) {
		console.log(err)
	}
}

async function setOnBidding() {
	if (sLogin == "no") {
		mintTkn.innerText = "please login to continue";
		return console.log("please login to continue")
	}

	try {
		let sTokenUri = document.getElementById("TokenUri").value;
		let nPrice = document.getElementById("Price").value;
		let nQuantity = document.getElementById("Quantity").value;

		// setOnsale.innerText = "";

		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.setOnBidding(sTokenUri, nPrice, nQuantity)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		contractMarket.methods.setOnBidding(sTokenUri, nPrice, nQuantity).send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)
	} catch (err) {
		console.log(err)
	}
}
async function removeFromBidding(uri) {

	try {
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.removeFromBidding(uri)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		await contractMarket.methods.removeFromBidding(uri)
			.send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
	
	async function BidAsset(owner,uri) {

	try {
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.bidAsset(owner,uri)
			.estimateGas({ from: sMsgsender , to: sMarket,
				value: web3.utils.toWei(nAmount.toString(), 'wei') })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		await contractMarket.methods.bidAsset(owner,uri)
			.send({ from: sMsgsender , to: sMarket,
				value: web3.utils.toWei(nAmount.toString(), 'wei') })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
	
	
	
	
	

	
	
	
	
	
	async function rejectBid(uri,bidderAddress) {

	try {
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.rejectBid(uri,bidderAddress)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		await contractMarket.methods.rejectBid(uri,bidderAddress)
			.send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
	
	async function withdrawBid(uri) {

	try {
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.withdrawbid(uri)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		await contractMarket.methods.withdrawbid(uri)
			.send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}





async function getMarket721() {
	try {
		let sResult = await contract721.methods.market().call();
		MarketAddress.innerText = sResult;
		console.log(sResult)
		return sResult
	} catch (err) {
		console.log(err)
	}
}

async function getMarket1155() {
	try {
		let sResult = await contract1155.methods.market().call();
		MarketAddress.innerText = sResult;
		console.log(sResult)
		return sResult
	} catch (err) {
		console.log(err)
	}
}

async function getId() {
	try {
		let sResult = await contract.methods.symbol().call();
		tokenSymbol.innerText = sResult;
		console.log(sResult)
	} catch (err) {
		error(err)
	}
}

async function getId(){
	try {
		var sUri = document.getElementById("URI").value;
		contractMarket.methods._uriId(sUri).call(function (err, id) {
			console.log(id)
			return id
		})
	} catch (err) {
		console.log(err)
	}
}

async function getBalance(){
	try {
		var sAddress = document.getElementById("wallet").value;
		contractMarket.methods._addressAccumlatedAmount(sAddress).call(function (err, id) {
			console.log(id)
			return id
		})
	} catch (err) {
		console.log(err)
	}
}

async function getAmount721(sAddress){
	try {
		// var sAddress = document.getElementById("wallet").value;
		contract721.methods.balanceOf(sAddress).call(function (err, id) {
			console.log(id)
			return id
		})
	} catch (err) {
		console.log(err)
	}
}

async function withdrawAccumlatedAmount(nAmount){
	try {
		
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.withdrawAccumlatedAmount(sTokenUri, nQuantity)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		contractMarket.methods.withdrawAccumlatedAmount(nAmount).send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
}

async function getAmount1155(sAddress,nId){
	try {
		// var sAddress = document.getElementById("wallet").value;
		contractMarket.methods.balanceOf(sAddress,nId).call(function (err, id) {
			console.log(id)
			return id
		})
	} catch (err) {
		console.log(err)
	}
}


async function getOwner(sAddress){
	try {
		// var sAddress = document.getElementById("wallet").value;
		contract721.methods.ownerOf(sAddress).call(function (err, owner) {
			console.log(owner)
			return owner
		})
	} catch (err) {
		console.log(err)
	}
}

async function isApproved721(){

	let sAccounts = await web3.eth.getAccounts();
	let sOwner = sAccounts[0];
	let sMarket = await getMarket721();
	try {
		// var sAddress = document.getElementById("wallet").value;
		contract721.methods.isApprovedForAll(sOwner,sMarket).call(function (err, status) {
			console.log(status)
			return status
		})
	} catch (err) {
		console.log(err)
	}
}

async function isApproved1155(){

	let sAccounts = await web3.eth.getAccounts();
	let sOwner = sAccounts[0];
	let sMarket = await getMarket1155();
	try {
		// var sAddress = document.getElementById("wallet").value;
		contract721.methods.isApprovedForAll(sOwner,sMarket).call(function (err, status) {
			console.log(status)
			return status
		})
	} catch (err) {
		console.log(err)
	}
}



async function approve721(){
	try {

		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];
		let sMarket = await getMarket721();
		

		let nGasUsed = await contract721.methods.setApprovalForAll(sMarket,true)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		contract721.methods.setApprovalForAll(sMarket,true).send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)
	} catch (err) {
		console.log(err)
	}

}


async function approve1155(){
	try {

		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];
		let sMarket = await getMarket1155();
		

		let nGasUsed = await contract1155.methods.setApprovalForAll(sMarket,true)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		contract1155.methods.setApprovalForAll(sMarket,true).send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)
	} catch (err) {
		console.log(err)
	}

}

async function buyNft() {

	try {
		let sOwner = document.getElementById("oowner").value;
		console.log(sOwner)
		let uri = document.getElementById("owner").value;
		console.log(uri)
		let nAmount = document.getElementById("Amount").value;
		console.log(nAmount)
		let sMarket= await getMarket721;


		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.buyImage(sOwner, uri)
			.estimateGas({ from: sMsgsender , to: sMarket,
				value: web3.utils.toWei(nAmount.toString(), 'wei') })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		await contractMarket.methods.buyImage(sOwner, uri)
			.send({ from: sMsgsender , to: sMarket,
				value: web3.utils.toWei(nAmount.toString(), 'wei') })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
}

async function removeFromSale(uri) {

	try {
		let sAccounts = await web3.eth.getAccounts();
		let sMsgsender = sAccounts[0];

		let nGasUsed = await contractMarket.methods.removeFromSale(uri)
			.estimateGas({ from: sMsgsender })
		alert("gas used for this transation is " + nGasUsed + " click on confirm in metamask to continue")

		await contractMarket.methods.removeFromSale(uri)
			.send({ from: sMsgsender })
			.on('transactionHash', function (sHash) {
				if (window.confirm('Your transation hash is' + sHash + "press ok to visit the transation details on ether scan")) {
					window.open(`https://goerli.etherscan.io/tx/${sHash}`);
				};
			}).on('receipt', function (receipt) {
				receiptStatus(receipt);
			})
			.catch(function (err) {
				alert(err.message)
			}
			)

	} catch (err) {
		console.log(err)
	}
}













async function checkChange() {
	window.ethereum.on('accountsChanged', function (sAccounts) {
		console.log('accountsChanged', sAccounts);
		alert("Account Changed");
		location.reload(true);
		userWallet.innerText = sAccounts;
	});
	window.ethereum.on('chainChanged', function (nNetworkId) {
		console.log('chainChanged', nNetworkId);
		alert("chain Changed");
		location.reload(true);
	});

}

function checkAddress(sAddress, sErrorId) {
	if (!web3.utils.isAddress(sAddress)) {
		console.log('invalid address')
		sErrorId.innerText = "invalid address"
		return false
	}
	else { return true }
}

function checkInput(sInput, sErrorId) {
	if (sInput.length == 0) {
		console.log("empty parameter sent")
		sErrorId.innerText = "empty parameter sent"
		return false
	}
	else { return true }
}


function checkAmount(nAmount, sErrorId) {
	if (nAmount <= 0) {
		console.log("inavalid amount")
		sErrorId.innerText = "inavalid amount"
		return false
	}
	else { return true }
}



async function checkMetamask() {
	let sAccount = await web3.eth.getAccounts();
	if (sAccount.length == 0) return alert("metaMask not connected")
}

function loginCheck() {
	if (sLogin == "no") {
		console.log("please login to continue")
		return false
	}
	else { return true }
}

checkChange();

function receiptStatus(receipt) {
	if (receipt.status == true) {
		alert(`You have approved ${sSpender} the amount of ${nAmount} token`);
		console.log(receipt)
	} else {
		alert('Transaction reverted due to some technical issues.')
	}
}


function receiptStatus(receipt) {
	if (receipt.status == true) {
		alert(`You have approved ${sSpender} the amount of ${nAmount} token`);
		console.log(receipt)
	} else {
		alert('Transaction reverted due to some technical issues.')
	}
}

